{
  "id": "problem_002",
  "solution_type": "patch",
  "description": "Fix edge case handling in statistical functions by adding proper input validation and meaningful error messages",
  "patch": "from typing import List, Union\n\n\ndef calculate_mean(numbers: List[Union[int, float]]) -> float:\n    \"\"\"\n    Calculate the arithmetic mean of a list of numbers.\n    \n    Args:\n        numbers: List of numbers\n        \n    Returns:\n        Arithmetic mean\n        \n    Raises:\n        ValueError: If the list is empty\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Cannot calculate mean of empty list\")\n    \n    return sum(numbers) / len(numbers)\n\n\ndef calculate_median(numbers: List[Union[int, float]]) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n    \n    Args:\n        numbers: List of numbers\n        \n    Returns:\n        Median value\n        \n    Raises:\n        ValueError: If the list is empty\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Cannot calculate median of empty list\")\n    \n    sorted_nums = sorted(numbers)\n    n = len(sorted_nums)\n    \n    if n % 2 == 0:\n        # Even number of elements\n        mid1 = sorted_nums[n // 2 - 1]\n        mid2 = sorted_nums[n // 2]\n        return (mid1 + mid2) / 2\n    else:\n        # Odd number of elements\n        return float(sorted_nums[n // 2])\n\n\ndef calculate_variance(numbers: List[Union[int, float]]) -> float:\n    \"\"\"\n    Calculate the variance of a list of numbers.\n    \n    Args:\n        numbers: List of numbers\n        \n    Returns:\n        Variance\n        \n    Raises:\n        ValueError: If the list is empty\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Cannot calculate variance of empty list\")\n        \n    if len(numbers) == 1:\n        return 0.0\n    \n    mean = calculate_mean(numbers)\n    squared_diffs = [(x - mean) ** 2 for x in numbers]\n    \n    # Population variance (N denominator)\n    return sum(squared_diffs) / len(numbers)\n\n\ndef safe_divide(numerator: Union[int, float], denominator: Union[int, float]) -> float:\n    \"\"\"\n    Safely divide two numbers.\n    \n    Args:\n        numerator: Number to divide\n        denominator: Number to divide by\n        \n    Returns:\n        Result of division\n        \n    Raises:\n        ValueError: If denominator is zero\n    \"\"\"\n    if denominator == 0:\n        raise ValueError(\"Division by zero is not allowed\")\n    \n    return numerator / denominator",
  "explanation": "The fix adds proper input validation at the beginning of each function to check for empty lists and raise meaningful ValueError exceptions. The calculate_variance function also handles the single-element case properly by returning 0.0 variance.",
  "test_cases_fixed": [
    "test_empty_list (in all three function test classes)"
  ]
}
